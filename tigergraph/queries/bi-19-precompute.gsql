CREATE OR REPLACE DISTRIBUTED QUERY bi19precompute() syntax v2 {
  MinAccum<VERTEX<Person>> @creator, @replyto;
  SetAccum<VERTEX<Person>> @neighbor;
  MapAccum<VERTEX<Person>, SumAccum<UINT>> @replyToCount;
  FILE f ("/tmp/bi19delta.csv");
  vMessages = SELECT m FROM Person:s -(<HAS_CREATOR)- (Comment|Post):m
    ACCUM m.@creator += s;
  
  vMessages = SELECT m1 FROM Comment:m1 -(REPLY_OF>)- _:m2
    ACCUM m1.@replyto += m2.@creator;

  tmp = SELECT p2 FROM Person:p1 -(KNOWS)- Person:p2
    ACCUM p1.@neighbor += p2;
  
  PersonReplied = SELECT p FROM Person:p -(<HAS_CREATOR)- Comment:m  
    WHERE m.@replyto IN p.@neighbor
    ACCUM p.@replyToCount += (m.@replyto -> 1)
    POST-ACCUM p.@neighbor.clear();
  tmp =
    SELECT p2
    FROM Person:p1 -(KNOWS)- Person:p2
    WHERE p1.id<p2.id AND (p1.@replyToCount.get(p2) > 0 OR p2.@replyToCount.get(p1) > 0)
    ACCUM
      # dump to file to save memory
      f.println(p1.id, p2.id, 1.0 / (p1.@replyToCount.get(p2) + p2.@replyToCount.get(p1)));
      # INSERT INTO KNOWS19 (FROM, TO, weight) VALUES (p1, p2, 1.0 / (p1.@replyToCount.get(p2) + p2.@replyToCount.get(p1))); 
}

CREATE LOADING JOB load_precompute19 FOR GRAPH ldbc_snb {
  DEFINE FILENAME file_delta;
  LOAD file_delta
    TO EDGE KNOWS19 VALUES ($0, $1, $2) USING header="false", separator=",";
}
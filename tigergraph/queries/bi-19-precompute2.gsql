# This method uses less memory but is slower
CREATE OR REPLACE QUERY calcWeight(Vertex<Person> p1, Vertex<Person> p2) RETURNS (DOUBLE) syntax v2 {
  SumAccum<UINT> @@res;
  OrAccum<BOOL> @selected;
  P1 = {p1}; P2 = {p2};
  M1 = SELECT m FROM P1 -(<HAS_CREATOR)- (Comment|Post):m;
  M2 = SELECT m FROM P2 -(<HAS_CREATOR)- (Comment|Post):m ACCUM m.@selected+= true;
  tmp = SELECT m FROM M1 -(<REPLY_OF|REPLY_OF>)- _:m WHERE m.@selected ACCUM @@res += 1;
  RETURN 1.0/@@res;
}

CREATE OR REPLACE DISTRIBUTED QUERY bi19precompute() syntax v2 {
  MinAccum<VERTEX<Person>> @creator, @replyto;
  SetAccum<VERTEX<Person>> @neighbor;
  MapAccum<VERTEX<Person>, SumAccum<UINT>> @replyToCount;  
  tmp =
    SELECT p2
    FROM Person:p1 -(KNOWS:e)- Person:p2
    WHERE p1.id<p2.id
    ACCUM
      UINT weight = calcWeight(p1,p2),
      INSERT INTO KNOWS19 (FROM, TO, weight) VALUES (p1, p2, weight);
}
CREATE OR REPLACE DISTRIBUTED QUERY precompute_root_post() SYNTAX v2 {
  MinAccum<UINT> @postId;
  M = SELECT t FROM Post:s -(<REPLY_OF)- Comment:t ACCUM t.@postId += s.id;
  WHILE M.size() > 0 DO
    M = SELECT t FROM M:s -(<REPLY_OF)- Comment:t
    ACCUM t.@postId += s.@postId
    POST-ACCUM
      INSERT INTO ROOT_POST (FROM, TO) VALUES (t.id, t.@postId);
  END;
}

// insert the ROOT_POST edges for one batch
CREATE OR REPLACE DISTRIBUTED QUERY delta_root_post(DATETIME startDate, DATETIME endDate) syntax v2 {
  SetAccum<VERTEX<Comment>> @sources;
  MaxAccum<UINT> @postId;
  INT startEpoch = datetime_to_epoch(startDate) * 1000;
  INT endEpoch = datetime_to_epoch(endDate) * 1000;
  S0 = SELECT m FROM Comment:m 
    WHERE m.creationDate BETWEEN startEpoch AND endEpoch 
      AND m.outdegree("ROOT_POST") == 0;
  S = SELECT s FROM S0:s ACCUM s.@sources += s;
  WHILE S.size() > 0 DO
    S = SELECT t FROM S:s -(REPLY_OF>|ROOT_POST>)- (Comment|Post):t
      ACCUM
        CASE WHEN t.type == "Post" THEN
          FOREACH ss IN s.@sources DO ss.@postId += t.id END
        WHEN t.type == "Comment" THEN
          t.@sources += s.@sources
        END
      HAVING t.type == "Comment";
  END;
  M = SELECT s FROM S0:s ACCUM INSERT INTO ROOT_POST (FROM, TO) VALUES (s.id, s.@postId);
}